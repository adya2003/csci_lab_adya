#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#define NUM_TEAMS 3
#define SQUAD_SIZE 5

// Structure for Player
typedef struct {
    char name[50];
    int kitNumber;
    struct {
        int day, month, year;
    } dob; // Date of birth
    char position[20];
} player_t;

// Structure for Team
typedef struct {
    char name[50];
    player_t players[SQUAD_SIZE];
    int activeSize; // Number of players in the team
} team_t;

// Function prototypes
void display_menu();
void enroll_club(team_t teams[], int *teamCount);
void add_player(team_t teams[], int teamCount);
void search_update(team_t teams[], int teamCount);
void display_club_statistics(team_t teams[], int teamCount);

int main() {
    team_t teams[NUM_TEAMS];
    int teamCount = 0; // Tracks the number of enrolled teams
    int choice;

    while (1) {
        display_menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                enroll_club(teams, &teamCount);
                break;
            case 2:
                add_player(teams, teamCount);
                break;
            case 3:
                search_update(teams, teamCount);
                break;
            case 4:
                display_club_statistics(teams, teamCount);
                break;
            case 0:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
}

// Function Definitions

// Display the menu
void display_menu() {
    printf("\n----- League Management Menu -----\n");
    printf("1. Enroll Club\n");
    printf("2. Add Player\n");
    printf("3. Search and Update Player\n");
    printf("4. Display Club Statistics\n");
    printf("0. Exit\n");
}

// Enroll a club
void enroll_club(team_t teams[], int *teamCount) {
    if (*teamCount >= NUM_TEAMS) {
        printf("Maximum number of clubs reached. Cannot enroll more clubs.\n");
        return;
    }
    printf("Enter the club name: ");
    scanf(" %[^\n]", teams[*teamCount].name); // Read club name with spaces
    teams[*teamCount].activeSize = 0; // Initialize player count
    (*teamCount)++;
    printf("Club enrolled successfully.\n");
}

// Add a player to a team
void add_player(team_t teams[], int teamCount) {
    if (teamCount == 0) {
        printf("No teams available. Please enroll a club first.\n");
        return;
    }

    printf("Select a team (0-%d): ", teamCount - 1);
    int teamIndex;
    scanf("%d", &teamIndex);

    if (teamIndex < 0 || teamIndex >= teamCount) {
        printf("Invalid team selection.\n");
        return;
    }

    team_t *team = &teams[teamIndex];

    if (team->activeSize >= SQUAD_SIZE) {
        printf("This team is full. Cannot add more players.\n");
        return;
    }

    player_t *player = &team->players[team->activeSize];

    printf("Enter player name: ");
    scanf(" %[^\n]", player->name);
    printf("Enter kit number: ");
    scanf("%d", &player->kitNumber);

    // Check for duplicate kit numbers
    for (int i = 0; i < team->activeSize; i++) {
        if (team->players[i].kitNumber == player->kitNumber) {
            printf("Duplicate kit number found. Please try again.\n");
            return;
        }
    }

    printf("Enter date of birth (dd mm yyyy): ");
    scanf("%d %d %d", &player->dob.day, &player->dob.month, &player->dob.year);
    printf("Enter position: ");
    scanf(" %[^\n]", player->position);

    team->activeSize++;
    printf("Player added successfully.\n");
}

// Search and update a player
void search_update(team_t teams[], int teamCount) {
    printf("Search by: 1. Name 2. Kit Number\n");
    int option;
    scanf("%d", &option);

    if (option == 1) {
        char searchName[50];
        printf("Enter player name: ");
        scanf(" %[^\n]", searchName);

        for (int i = 0; i < teamCount; i++) {
            for (int j = 0; j < teams[i].activeSize; j++) {
                if (strcasecmp(teams[i].players[j].name, searchName) == 0) {
                    printf("Player found: %s (Team: %s)\n", teams[i].players[j].name, teams[i].name);
                    printf("Enter new position: ");
                    scanf(" %[^\n]", teams[i].players[j].position);
                    printf("Player details updated.\n");
                    return;
                }
            }
        }
    } else if (option == 2) {
        int kitNumber;
        printf("Enter kit number: ");
        scanf("%d", &kitNumber);

        for (int i = 0; i < teamCount; i++) {
            for (int j = 0; j < teams[i].activeSize; j++) {
                if (teams[i].players[j].kitNumber == kitNumber) {
                    printf("Player found: %s (Team: %s)\n", teams[i].players[j].name, teams[i].name);
                    printf("Enter new position: ");
                    scanf(" %[^\n]", teams[i].players[j].position);
                    printf("Player details updated.\n");
                    return;
                }
            }
        }
    } else {
        printf("Invalid option.\n");
    }

    printf("Player not found.\n");
}

// Display club statistics
void display_club_statistics(team_t teams[], int teamCount) {
    for (int i = 0; i < teamCount; i++) {
        printf("\nTeam: %s\n", teams[i].name);
        printf("Number of players: %d\n", teams[i].activeSize);

        for (int j = 0; j < teams[i].activeSize; j++) {
            player_t *player = &teams[i].players[j];
            printf("Name: %s, Kit: %d, DOB: %02d/%02d/%04d, Position: %s\n",
                   player->name, player->kitNumber, player->dob.day, player->dob.month, player->dob.year, player->position);
        }
    }
}
