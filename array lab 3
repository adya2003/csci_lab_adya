#include <stdio.h>
#include <stdbool.h>

#define SIZE 24
#define nRows 8
#define nCols 3

// PROTOTYPES
void print_array(int array[], int length);
void print_matrix(int mat[][nCols], int rows);
bool isValid(const int arr[], int length, int pos);
void remove_element(int arr[], int length, int pos);
void insert_element(int arr[], int length, int pos, int value);
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_trans[nCols][nRows]);
bool found_duplicate(int arr[], int length);

int main() {
    int arr[SIZE] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120,
                     130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240};
    int arr2d[nRows][nCols];

    // Test print_array
    printf("Original array:\n");
    print_array(arr, SIZE);

    // Test remove_element
    remove_element(arr, SIZE, 2);
    printf("\nArray after removing element at index 2:\n");
    print_array(arr, SIZE - 1);

    // Test insert_element
    insert_element(arr, SIZE - 1, 2, 85);
    printf("\nArray after inserting 85 at index 2:\n");
    print_array(arr, SIZE);

    // Test reshape
    printf("\nReshaped 2D array:\n");
    reshape(arr, SIZE, nRows, nCols, arr2d);
    print_matrix(arr2d, nRows);

    // Test transpose
    int mat_trans[nCols][nRows];
    printf("\nTransposed matrix:\n");
    trans_matrix(nRows, nCols, arr2d, mat_trans);
    print_matrix(mat_trans, nCols);

    // Test found_duplicate
    bool has_duplicate = found_duplicate(arr, SIZE);
    printf("\nArray has duplicate: %s\n", has_duplicate ? "Yes" : "No");

    return 0;
}

// Function to print a 1D array
void print_array(int array[], int length) {
    for (int i = 0; i < length; i++)
        printf("array[%d] = %d\n", i, array[i]);
}

// Function to print a 2D matrix
void print_matrix(int mat[][nCols], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < nCols; j++)
            printf("mat[%d][%d] = %d ", i, j, mat[i][j]);
        printf("\n");
    }
}

// Function to check if a position is valid
bool isValid(const int arr[], int length, int pos) {
    return (pos >= 0 && pos < length);
}

// Function to remove an element from a 1D array at a specific index
void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid index for removal.\n");
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
    arr[length - 1] = 0; // Set last element to 0 (optional)
}

// Function to insert an element into a 1D array at a specific index
void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid index for insertion.\n");
        return;
    }
    for (int i = length - 1; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
}

// Function to reshape a 1D array into a 2D array
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Reshape error: Array size mismatch.\n");
        return;
    }
    for (int i = 0; i < length; i++) {
        arr2d[i / nCols][i % nCols] = arr[i];
    }
}

// Function to transpose a 2D matrix
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_trans[nCols][nRows]) {
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat_trans[j][i] = mat[i][j];
        }
    }
}

// Function to check for duplicate elements in a 1D array
bool found_duplicate(int arr[], int length) {
    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}
