#include <webots/robot.h>
#include <webots/light_sensor.h>
#include <webots/distance_sensor.h>
#include <webots/motor.h>
#include <stdio.h>
#include <math.h>

#define TIME_STEP 32
#define MAX_SPEED 6.28
#define TOLERANCE 5.0  // Tolerance for detecting the brightest light
#define STOP_TIME 233.568  // Time to stop in seconds (0:03:53:568)
#define PAUSE_DURATION 60.0  // Pause duration in seconds

// Sensor and motor tags
WbDeviceTag left_motor, right_motor;
WbDeviceTag ps[8];  // 8 proximity sensors
WbDeviceTag light_sensor;

bool first_move = true;
bool navigation_to_station = false;
bool paused = false;
bool pause_complete = false;
double pause_start_time = 0.0;

double max_light_intensity = 0.0;  // Tracks the brightest light intensity
double current_light_intensity = 0.0;  // Current light sensor value

bool found_brightest_light = false;  // Flag to stop movement once the brightest light is found

// Initialize devices
void initialize_devices() {
  left_motor = wb_robot_get_device("left wheel motor");
  right_motor = wb_robot_get_device("right wheel motor");
  if (left_motor == NULL || right_motor == NULL) {
    printf("Error: Motors not found!\n");
    return;
  }

  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);

  // Initialize proximity sensors
  for (int i = 0; i < 8; i++) {
    char sensor_name[4];
    sprintf(sensor_name, "ps%d", i);
    ps[i] = wb_robot_get_device(sensor_name);
    wb_distance_sensor_enable(ps[i], TIME_STEP);
  }

  // Initialize light sensor
  light_sensor = wb_robot_get_device("ls0");
  if (light_sensor == NULL) {
    printf("Error: Light sensor not found!\n");
    return;
  }
  wb_light_sensor_enable(light_sensor, TIME_STEP);
}

// Process sensors and control the robot
void process_sensors_and_control() {
  double current_time = wb_robot_get_time();

  // Check if it's time to pause
  if (current_time >= STOP_TIME && !paused && !pause_complete) {
    printf("Pause initiated at time: %f seconds\n", current_time);
    wb_motor_set_velocity(left_motor, 0.0);
    wb_motor_set_velocity(right_motor, 0.0);
    paused = true;
    pause_start_time = current_time;
    return;
  }

  // If paused, check if the pause duration is over
  if (paused) {
    if (current_time - pause_start_time >= PAUSE_DURATION) {
      printf("Resuming navigation to station at time: %f seconds\n", current_time);
      paused = false;
      pause_complete = true;  // Ensure pause logic doesn't trigger again
      navigation_to_station = true;
    } else {
      return;  // Stay paused
    }
  }

  // Navigate to the station
  if (navigation_to_station && !found_brightest_light) {
    current_light_intensity = wb_light_sensor_get_value(light_sensor);

    // Track the brightest light intensity during exploration
    if (current_light_intensity > max_light_intensity) {
      max_light_intensity = current_light_intensity;
      printf("New brightest light intensity recorded: %f\n", max_light_intensity);
    }

    // If the current light intensity is close enough to the brightest value, stop
    if (fabs(current_light_intensity - max_light_intensity) < TOLERANCE) {
      printf("Station reached with light intensity: %f. Stopping.\n", current_light_intensity);
      wb_motor_set_velocity(left_motor, 0.0);
      wb_motor_set_velocity(right_motor, 0.0);
      found_brightest_light = true;  // Mark that the brightest light has been found
      return;
    }

    // Movement logic to navigate towards the brightest light
    double left_speed = 0.5 * MAX_SPEED;
    double right_speed = 0.5 * MAX_SPEED;

    if (current_light_intensity < max_light_intensity) {
      // Adjust direction if needed (simulate a turn)
      left_speed = 0.2 * MAX_SPEED;
      right_speed = 0.8 * MAX_SPEED;
    }

    wb_motor_set_velocity(left_motor, left_speed);
    wb_motor_set_velocity(right_motor, right_speed);
    return;
  }

  // Default exploration logic (before navigation starts or if already paused)
  double ps_values[8];
  for (int i = 0; i < 8; i++) {
    ps_values[i] = wb_distance_sensor_get_value(ps[i]);
  }

  // Default movement logic
  double left_speed = MAX_SPEED;
  double right_speed = MAX_SPEED;

  bool front_obstacle = ps_values[0] > 80.0 || ps_values[7] > 80.0;
  bool side_left = ps_values[5] > 80.0;
  bool side_right = ps_values[2] > 80.0;

  if (front_obstacle) {
    if (side_left && side_right) {
      left_speed = -0.5 * MAX_SPEED;
      right_speed = -0.5 * MAX_SPEED;
    } else if (side_left) {
      left_speed = MAX_SPEED;
      right_speed = 0.1 * MAX_SPEED;
    } else if (side_right) {
      left_speed = 0.1 * MAX_SPEED;
      right_speed = MAX_SPEED;
    } else {
      left_speed = MAX_SPEED;
      right_speed = -0.1 * MAX_SPEED;
    }
  } else {
    if (side_left && !side_right) {
      left_speed = 0.1 * MAX_SPEED;
      right_speed = MAX_SPEED;
    } else if (!side_left && !side_right) {
      left_speed = 0.5 * MAX_SPEED;
      right_speed = 0.5 * MAX_SPEED;
    } else if (!side_left && side_right) {
      left_speed = 0.1 * MAX_SPEED;
      right_speed = MAX_SPEED;
    }
  }

  // Set motor speeds
  wb_motor_set_velocity(left_motor, left_speed);
  wb_motor_set_velocity(right_motor, right_speed);
}

int main() {
  wb_robot_init();

  initialize_devices();

  while (wb_robot_step(TIME_STEP) != -1) {
    process_sensors_and_control();
  }

  wb_robot_cleanup();
  return 0;
}
