#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define WIDTH 512
#define HEIGHT 512

// Function to skip comments and empty lines in a PGM file
void skipline(FILE *file) {
    int character;
    while ((character = fgetc(file)) != EOF) {
        if (character == '#') {
            // Skip the entire comment line
            while ((character = fgetc(file)) != EOF && character != '\n') {}
        } else if (character == '\n' || character == ' ') {
            // Skip empty lines or spaces
            continue;
        } else {
            ungetc(character, file); // Put back valid data
            break;
        }
    }
}

// Function to read a PGM image in text format
int readPGMText(const char *filename, unsigned char *pixels) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Error: Cannot open file '%s'.\n", filename);
        return -1;
    }

    char header[3];
    int width, height, maxGray;

    // Read and validate the header
    if (fscanf(file, "%2s", header) != 1) {
        fprintf(stderr, "Error: Failed to read PGM header in '%s'.\n", filename);
        fclose(file);
        return -1;
    }

    if (strcmp(header, "P2") != 0) {
        fprintf(stderr, "Error: '%s' is not a valid P2 PGM file.\n", filename);
        fclose(file);
        return -1;
    }

    skipline(file); // Skip comments

    // Read dimensions and max gray value
    if (fscanf(file, "%d %d", &width, &height) != 2) {
        fprintf(stderr, "Error: Failed to read dimensions in '%s'.\n", filename);
        fclose(file);
        return -1;
    }

    if (fscanf(file, "%d", &maxGray) != 1) {
        fprintf(stderr, "Error: Failed to read max gray value in '%s'.\n", filename);
        fclose(file);
        return -1;
    }

    printf("Debug: Reading '%s' - Width: %d, Height: %d, MaxGray: %d\n", filename, width, height, maxGray);

    // Check if dimensions match
    if (width != WIDTH || height != HEIGHT) {
        fprintf(stderr, "Error: '%s' dimensions do not match %dx%d.\n", filename, WIDTH, HEIGHT);
        fclose(file);
        return -1;
    }

    // Read pixel data
    for (int i = 0; i < WIDTH * HEIGHT; i++) {
        int pixelValue;
        if (fscanf(file, "%d", &pixelValue) != 1) {
            fprintf(stderr, "Error: Failed to read pixel value at index %d in '%s'.\n", i, filename);
            fclose(file);
            return -1;
        }
        pixels[i] = (unsigned char)pixelValue;
    }

    fclose(file);
    return 0;
}

// Function to write a PGM image in text format
int writePGMText(const char *filename, unsigned char *pixels) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        fprintf(stderr, "Error: Cannot open file '%s' for writing.\n", filename);
        return -1;
    }

    fprintf(file, "P2\n%d %d\n255\n", WIDTH, HEIGHT);
    for (int i = 0; i < WIDTH * HEIGHT; i++) {
        fprintf(file, "%d ", pixels[i]);
        if ((i + 1) % WIDTH == 0) {
            fprintf(file, "\n");
        }
    }

    fclose(file);
    return 0;
}

// Function to write a PGM image in binary format
int writePGMBinary(const char *filename, unsigned char *pixels) {
    FILE *file = fopen(filename, "wb");
    if (!file) {
        fprintf(stderr, "Error: Cannot open file '%s' for writing.\n", filename);
        return -1;
    }

    fprintf(file, "P5\n%d %d\n255\n", WIDTH, HEIGHT);
    fwrite(pixels, sizeof(unsigned char), WIDTH * HEIGHT, file);

    fclose(file);
    return 0;
}

// Function to embed the secret image into the cover image using 4-bit LSB steganography
void embedLSB(unsigned char *coverPixels, unsigned char *secretPixels) {
    for (int i = 0; i < WIDTH * HEIGHT; i++) {
        unsigned char secretMSB = (secretPixels[i] & 0xF0) >> 4; // Extract MSB from secret
        coverPixels[i] = (coverPixels[i] & 0xF0) | secretMSB;    // Embed MSB into cover's LSB
    }
}

// Function to extract the secret image from the stego image
void extractLSB(unsigned char *stegoPixels, unsigned char *outputPixels) {
    for (int i = 0; i < WIDTH * HEIGHT; i++) {
        outputPixels[i] = (stegoPixels[i] & 0x0F) << 4; // Extract LSB and shift to MSB
    }
}

int main() {
    const char *coverFile = "baboon.pgm";
    const char *secretFile = "farm.pgm";
    const char *stegoFile = "stego.pgm";
    const char *extractedFile = "extracted.pgm";

    unsigned char *coverPixels = malloc(WIDTH * HEIGHT);
    unsigned char *secretPixels = malloc(WIDTH * HEIGHT);
    unsigned char *outputPixels = malloc(WIDTH * HEIGHT);

    if (!coverPixels || !secretPixels || !outputPixels) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        free(coverPixels);
        free(secretPixels);
        free(outputPixels);
        return -1;
    }

    // Read the cover image
    if (readPGMText(coverFile, coverPixels) != 0) {
        free(coverPixels);
        free(secretPixels);
        free(outputPixels);
        return -1;
    }

    // Read the secret image
    if (readPGMText(secretFile, secretPixels) != 0) {
        free(coverPixels);
        free(secretPixels);
        free(outputPixels);
        return -1;
    }

    // Embed the secret image into the cover image
    embedLSB(coverPixels, secretPixels);

    // Save the stego image in binary format
    if (writePGMBinary(stegoFile, coverPixels) != 0) {
        free(coverPixels);
        free(secretPixels);
        free(outputPixels);
        return -1;
    }

    // Extract the secret image from the stego image
    extractLSB(coverPixels, outputPixels);

    // Save the extracted secret image in text format
    if (writePGMText(extractedFile, outputPixels) != 0) {
        free(coverPixels);
        free(secretPixels);
        free(outputPixels);
        return -1;
    }

    // Free allocated memory
    free(coverPixels);
    free(secretPixels);
    free(outputPixels);

    printf("Program completed successfully.\n");
    return 0;
}
