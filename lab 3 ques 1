#include <stdio.h>
#include <stdbool.h>

// Function declarations
bool isValid(const int arr[], int length, int pos);
void remove_element(int arr[], int length, int pos);
void insert_element(int arr[], int length, int pos, int value);
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]);
bool found_duplicate(int arr[], int length);

// Function definitions
bool isValid(const int arr[], int length, int pos) {
    return (pos >= 0 && pos < length);
}

void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid position.\n");
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
    printf("Element removed successfully.\n");
}

void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length + 1, pos)) {
        printf("Invalid position.\n");
        return;
    }
    for (int i = length; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
    printf("Element inserted successfully.\n");
}

void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Invalid dimensions for reshape.\n");
        return;
    }
    int index = 0;
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[index++];
        }
    }
    printf("Array reshaped successfully.\n");
}

void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]) {
    for (int row = 0; row < nRows; row++) {
        for (int col = 0; col < nCols; col++) {
            mat_transp[col][row] = mat[row][col];
        }
    }
    printf("Matrix transposed successfully.\n");
}

bool found_duplicate(int arr[], int length) {
    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}

// Main function
int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int length = 5;

    printf("Testing remove_element:\n");
    remove_element(arr, length, 2); // Removes element at index 2
    for (int i = 0; i < length - 1; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    printf("Testing insert_element:\n");
    insert_element(arr, length - 1, 2, 80); // Inserts 80 at index 2
    for (int i = 0; i < length; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    printf("Testing reshape:\n");
    int arr2d[2][3];
    reshape(arr, 6, 2, 3, arr2d);
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", arr2d[i][j]);
        }
        printf("\n");
    }

    printf("Testing found_duplicate:\n");
    if (found_duplicate(arr, length)) {
        printf("Duplicates found.\n");
    } else {
        printf("No duplicates found.\n");
    }

    return 0;
}

